// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LubanClient is the client API for Luban service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LubanClient interface {
	Submit(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitReply, error)
}

type lubanClient struct {
	cc grpc.ClientConnInterface
}

func NewLubanClient(cc grpc.ClientConnInterface) LubanClient {
	return &lubanClient{cc}
}

func (c *lubanClient) Submit(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitReply, error) {
	out := new(SubmitReply)
	err := c.cc.Invoke(ctx, "/rpc.Luban/Submit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LubanServer is the server API for Luban service.
// All implementations must embed UnimplementedLubanServer
// for forward compatibility
type LubanServer interface {
	Submit(context.Context, *SubmitRequest) (*SubmitReply, error)
	mustEmbedUnimplementedLubanServer()
}

// UnimplementedLubanServer must be embedded to have forward compatible implementations.
type UnimplementedLubanServer struct {
}

func (UnimplementedLubanServer) Submit(context.Context, *SubmitRequest) (*SubmitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submit not implemented")
}
func (UnimplementedLubanServer) mustEmbedUnimplementedLubanServer() {}

// UnsafeLubanServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LubanServer will
// result in compilation errors.
type UnsafeLubanServer interface {
	mustEmbedUnimplementedLubanServer()
}

func RegisterLubanServer(s grpc.ServiceRegistrar, srv LubanServer) {
	s.RegisterService(&Luban_ServiceDesc, srv)
}

func _Luban_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LubanServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Luban/Submit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LubanServer).Submit(ctx, req.(*SubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Luban_ServiceDesc is the grpc.ServiceDesc for Luban service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Luban_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Luban",
	HandlerType: (*LubanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Submit",
			Handler:    _Luban_Submit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/luban.proto",
}
